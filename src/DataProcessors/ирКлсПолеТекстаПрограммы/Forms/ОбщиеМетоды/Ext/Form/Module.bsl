Перем ОбщиеМетодыВсе;
Перем СхемаКомпоновки;
Перем СтарыйСнимокНастройкиКомпоновки;

Функция СохраняемаяНастройкаФормы(выхНаименование, выхИменаСвойств) Экспорт 
	выхИменаСвойств = "Форма.ОбщиеМетодыСтрокаПоиска, Форма.ПрименятьФильтрКОписанию, Форма.ПрименятьФильтрКТелу, Форма.ОбновлятьСразу, Форма.ПрименятьФильтрКПараметрам";
	Возврат Неопределено;
КонецФункции

Процедура ЗагрузитьНастройкуВФорме(НастройкаФормы, ДопПараметры) Экспорт 
	
	ирКлиент.ЗагрузитьНастройкуФормыЛкс(ЭтаФорма, НастройкаФормы); 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСохранитьНастройки(Кнопка)
	
	ирКлиент.ВыбратьИСохранитьНастройкуФормыЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗагрузитьНастройки(Кнопка)
	
	ирКлиент.ВыбратьИЗагрузитьНастройкуФормыЛкс(ЭтаФорма);

КонецПроцедуры

Процедура ПриОткрытии()
	
	ирКлиент.Форма_ПриОткрытииЛкс(ЭтаФорма);
	ирКлиент.СоздатьМенеджерСохраненияНастроекФормыЛкс(ЭтаФорма);
	ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(Компоновщик.Настройки.Порядок, "Имя");
	ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(Компоновщик.Настройки.Порядок, "Модуль");
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "ТипЗначения", "", ВидСравненияКомпоновкиДанных.НеРавно,,, Ложь).Представление = "Только функции";
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "КоличествоПараметров", 0, ВидСравненияКомпоновкиДанных.Равно,,, Ложь).Представление = "Только без параметров";
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "Экспорт", Истина);
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "Глобальный", Истина,,,, Ложь);
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "КлиентУП", Истина,,,, Ложь );
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "Сервер", Истина,,,, Ложь);
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "ВнешнееСоединение", Истина,,,, Ложь );
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "КлиентОП", Истина,,,, Ложь);
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "ВызовСервера", Истина,,,, Ложь);
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "Привилегированный", Истина,,,, Ложь );
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "ОбщийМодуль", Истина,,,, Ложь );
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "ПовторноеИспользование", "", ВидСравненияКомпоновкиДанных.НеРавно,,, Ложь);
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "ПараметрыСтрокой", "", ВидСравненияКомпоновкиДанных.Содержит,, Ложь, Ложь);
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "КоличествоПараметров", 10, ВидСравненияКомпоновкиДанных.Больше,, Ложь, Ложь);
	Если ЗначениеЗаполнено(ПараметрСтрокаПоиска) Тогда
		ЭтаФорма.ОбщиеМетодыСтрокаПоиска = ПараметрСтрокаПоиска;
	КонецЕсли;
	ПерезаполнитьТаблицуВсехМетодов();
	ЭтаФорма.ДатаОбновленияКэша = ирОбщий.ДатаОбновленияКэшаМодулейЛкс();

КонецПроцедуры

Процедура ПерезаполнитьТаблицуВсехМетодов(ТолькоГлобальные = Ложь) Экспорт 
	
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	ОбщиеМетодыВсе = ОбщиеМетоды.ВыгрузитьКолонки();
	ОбщиеМетодыВсе.Колонки.Добавить("ТаблицаСтруктурТипов");
	мПлатформа.ИнициацияОписанияМетодовИСвойств();
	МетаТипы = ирКэш.ТипыМетаОбъектов(Истина, Ложь, Ложь);
	ИндикаторТиповМД = ирОбщий.ПолучитьИндикаторПроцессаЛкс(МетаТипы.Количество(), "МетаТипы");
	Для Каждого МетаТип Из МетаТипы Цикл
		ирОбщий.ОбработатьИндикаторЛкс(ИндикаторТиповМД);
		Если Ложь
			Или МетаТип.Множественное = "Перерасчеты" 
			Или ТолькоГлобальные И МетаТип.Единственное <> "ОбщийМодуль"
		Тогда
			Продолжить;
		КонецЕсли; 
		ИндикаторОбъектовМД = ирОбщий.ПолучитьИндикаторПроцессаЛкс(Метаданные.ОбщиеМодули.Количество(), МетаТип.Множественное);
		Для Каждого ОбъектМД Из Метаданные[МетаТип.Множественное] Цикл
			ирОбщий.ОбработатьИндикаторЛкс(ИндикаторОбъектовМД);
			Если МетаТип.Единственное = "ОбщийМодуль" Тогда
				Если ТолькоГлобальные И Не ОбъектМД.Глобальный Тогда
					Продолжить;
				КонецЕсли; 
				СтруктураТипа = мПлатформа.НоваяСтруктураТипа();
				СтруктураТипа.ИмяОбщегоТипа = "ОбщийМодуль";
				СтруктураТипа.Метаданные = ОбъектМД;
			Иначе
				ИмяТипаМенеджера = ирОбщий.ИмяТипаИзПолногоИмениМДЛкс(ОбъектМД, "Менеджер");
				Попытка
					ТипМенеджера = Тип(ИмяТипаМенеджера);
				Исключение
					// у этого типа метаданных нет модуля менеджера
					Прервать;
				КонецПопытки; 
				СтруктураТипа = мПлатформа.СтруктураТипаИзКонкретногоТипа(ТипМенеджера);
			КонецЕсли; 
			ДобавитьМетодыМодуля(СтруктураТипа, МетаТип);
		КонецЦикла;
		ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	СтруктураТипа = мПлатформа.СтруктураТипаИзЗначения(Метаданные);
	ДобавитьМетодыМодуля(СтруктураТипа, Неопределено, "МодульОбычногоПриложения");
	ДобавитьМетодыМодуля(СтруктураТипа, Неопределено, "МодульУправляемогоПриложения");
	ДобавитьМетодыМодуля(СтруктураТипа, Неопределено, "МодульВнешнегоСоединения");
	СхемаКомпоновки = ирОбщий.СоздатьСхемуПоТаблицамЗначенийЛкс(СтруктураТаблицКомпоновки());
	#Если Сервер И Не Сервер Тогда
		СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	#КонецЕсли
	СписокЗначений = мПлатформа.ДоступныеЗначенияТипа("ПовторноеИспользованиеВозвращаемыхЗначений");
	СхемаКомпоновки.НаборыДанных[0].Поля.Найти("ПовторноеИспользование").УстановитьДоступныеЗначения(СписокЗначений);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	ОбновитьДанные();

КонецПроцедуры

Процедура ДобавитьМетодыМодуля(Знач СтруктураТипа, СтрокаМетаТипа, ТипМодуляКонфигурации = "")
	
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	МодульМетаданных = мПлатформа.ПодготовитьМодульМетаданных(СтруктураТипа, ТипМодуляКонфигурации);
	Если МодульМетаданных = Неопределено Тогда
		// Пустой модуль не рождает файл
		Возврат;
	КонецЕсли;
	МетаМодуль = СтруктураТипа.Метаданные;
	МетодыМодуля = МодульМетаданных.Методы;
	#Если Сервер И Не Сервер Тогда
		МетодыМодуля = Новый ТаблицаЗначений;
	#КонецЕсли
	ИскательВозврата = Неопределено;
	Если ВычислитьТипыСразу Тогда
		ИндикаторМодуля = ирОбщий.ПолучитьИндикаторПроцессаЛкс(МетодыМодуля.Количество(), МетаМодуль.Имя + ". Вычисление типов");
	Иначе
		ИндикаторМодуля = Неопределено;
	КонецЕсли; 
	Для Каждого МетодМодуля Из МетодыМодуля Цикл
		Если ИндикаторМодуля <> Неопределено Тогда
			ирОбщий.ОбработатьИндикаторЛкс(ИндикаторМодуля);
		КонецЕсли; 
		СтрокаМетода = ОбщиеМетодыВсе.Добавить();
		#Если Сервер И Не Сервер Тогда
			СтрокаМетода = ОбщиеМетоды.Добавить();
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(СтрокаМетода, МетодМодуля);
		СтрокаМетода.ОбщийМодуль = СтрокаМетаТипа <> Неопределено И СтрокаМетаТипа.Единственное = "ОбщийМодуль";
		СтрокаМетода.Экспорт = МетодМодуля.ЛиЭкспорт;
		СтрокаМетода.Позиция = МетодМодуля.ПозицияОпределения;
		Если ТипЗнч(МетаМодуль) = Тип("ОбъектМетаданныхКонфигурация") Тогда
			//СтрокаМетода.Модуль = "<" + ТипМодуляКонфигурации + ">";
			СтрокаМетода.Модуль = ТипМодуляКонфигурации;
			СтрокаМетода.Глобальный = Истина;
			Если ТипМодуляКонфигурации = "МодульОбычногоПриложения" Тогда 
				СтрокаМетода.КлиентОП = Истина;
			ИначеЕсли ТипМодуляКонфигурации = "МодульУправляемогоПриложения" Тогда 
				СтрокаМетода.КлиентУП = Истина;
			ИначеЕсли ТипМодуляКонфигурации = "МодульВнешнегоСоединения" Тогда 
				СтрокаМетода.ВнешнееСоединение = Истина;
			КонецЕсли; 
			СтрокаМетода.ПолноеИмя = МетодМодуля.Имя;
		Иначе
			СтрокаМетода.Модуль = МетаМодуль.ПолноеИмя();
			Если СтрокаМетода.ОбщийМодуль Тогда
				#Если Сервер И Не Сервер Тогда
					МетаМодуль = Метаданные.ОбщиеМодули.ирОбщий;
				#КонецЕсли
				СтрокаМетода.КлиентУП = МетаМодуль.КлиентУправляемоеПриложение;
				СтрокаМетода.КлиентОП = МетаМодуль.КлиентОбычноеПриложение;
				СтрокаМетода.Сервер = МетаМодуль.Сервер;
				СтрокаМетода.ВызовСервера = МетаМодуль.ВызовСервера;
				СтрокаМетода.Глобальный = МетаМодуль.Глобальный;
				СтрокаМетода.Привилегированный = МетаМодуль.Привилегированный;
				СтрокаМетода.ПовторноеИспользование = ?(МетаМодуль.ПовторноеИспользованиеВозвращаемыхЗначений = Метаданные.СвойстваОбъектов.ПовторноеИспользованиеВозвращаемыхЗначений.НеИспользовать, "",
					МетаМодуль.ПовторноеИспользованиеВозвращаемыхЗначений);
				СтрокаМетода.ВнешнееСоединение = МетаМодуль.ВнешнееСоединение;
				Если Не МетаМодуль.Глобальный Тогда
					СтрокаМетода.ПолноеИмя = МетаМодуль.Имя + "." + МетодМодуля.Имя;
				Иначе
					СтрокаМетода.ПолноеИмя = МетодМодуля.Имя;
				КонецЕсли; 
			Иначе
				СтрокаМетода.КлиентУП = Истина;
				СтрокаМетода.КлиентОП = Истина;
				СтрокаМетода.Сервер = Истина;
				СтрокаМетода.ВнешнееСоединение = Истина;
				СтрокаМетода.ПовторноеИспользование = "";
				СтрокаМетода.ПолноеИмя = СтрокаМетаТипа.Множественное + "." + МетаМодуль.Имя + "." + МетодМодуля.Имя;
			КонецЕсли;
		КонецЕсли; 
		ОбновитьТипЗначения(МетодМодуля, МодульМетаданных, СтрокаМетода, ИскательВозврата);
		ПараметрыМетода = мПлатформа.ПараметрыМетодаМодуля(МетодМодуля);
		Если ПараметрыМетода <> Неопределено Тогда
			СтрокаМетода.ПараметрыСтрокой = ирОбщий.СтрСоединитьЛкс(ПараметрыМетода.ВыгрузитьКолонку("Имя"));
			СтрокаМетода.КоличествоПараметров = ПараметрыМетода.Количество();
		КонецЕсли; 
	КонецЦикла;
	Если ИндикаторМодуля <> Неопределено Тогда
		ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьТипЗначения(Знач МетодМодуля, Знач МодульМетаданных, Знач СтрокаОбщейТаблицы, Знач ВычислятьТипы = Неопределено, ИскательВозврата = Неопределено)
	
	#Если Сервер И Не Сервер Тогда
		СтрокаОбщейТаблицы = ОбщиеМетоды.Добавить();
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	Если ВычислятьТипы = Неопределено Тогда
		ВычислятьТипы = ЭтаФорма.ВычислитьТипыСразу;
	КонецЕсли; 
	Если ВычислятьТипы Тогда
		мПлатформа.ПодготовитьТипРезультатаМетода(МетодМодуля, МодульМетаданных, ИскательВозврата); 
	КонецЕсли; 
	ТаблицаСтруктурТипов = мПлатформа.ТаблицаСтруктурТиповСловаМодуля(МетодМодуля, МодульМетаданных);
	ОбновитьТипЗначенияИзТаблицыСтруктурТипов(СтрокаОбщейТаблицы, ТаблицаСтруктурТипов, Ложь);
	СтрокаОбщейТаблицы.ТаблицаСтруктурТипов = ТаблицаСтруктурТипов;

КонецПроцедуры

Функция СтруктураТаблицКомпоновки()
	
	СтруктураТаблиц = Новый Структура("Таблица");
	СтруктураТаблиц.Таблица = ОбщиеМетодыВсе.Скопировать();
	СтруктураТаблиц.Таблица.Колонки.Удалить("ТаблицаСтруктурТипов");
	Возврат СтруктураТаблиц;

КонецФункции

Процедура ПриЗакрытии()
	
	ирКлиент.Форма_ПриЗакрытииЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыИсполняемаяКомпоновка(Кнопка)
	
	ОбновитьДанные(, Истина);
	
КонецПроцедуры

Процедура ОбновитьДанные(РедактируемыйФильтрПоПодстроке = Неопределено, РежимОтладки = Ложь) Экспорт 
	
	НастройкаКомпоновки = КонечнаяНастройкаКомпоновки(РедактируемыйФильтрПоПодстроке);
	ТекущаяСтрока = ЭлементыФормы.ОбщиеМетоды.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтарыйМетод = ТекущаяСтрока.ПолноеИмя;
	КонецЕсли; 
	СтруктураТаблиц = СтруктураТаблицКомпоновки();
	НоваяТаблица = ирОбщий.СкомпоноватьВКоллекциюЗначенийПоСхемеЛкс(СхемаКомпоновки, НастройкаКомпоновки,, СтруктураТаблиц,,,,, РежимОтладки,,,, Истина);
	Если РежимОтладки Тогда
		Возврат;
	КонецЕсли; 
	ОбщиеМетоды.Загрузить(НоваяТаблица);
	СтарыйСнимокНастройкиКомпоновки = ирОбщий.ОбъектВСтрокуXMLЛкс(Компоновщик.Настройки);
	Если СтарыйМетод <> Неопределено Тогда
		НоваяТекущаяСтрока = ОбщиеМетоды.Найти(СтарыйМетод, "ПолноеИмя");
		Если НоваяТекущаяСтрока <> Неопределено Тогда
			ЭлементыФормы.ОбщиеМетоды.ТекущаяСтрока = НоваяТекущаяСтрока;
		КонецЕсли; 
	КонецЕсли; 
	ЭтаФорма.Количество = ОбщиеМетоды.Количество();

КонецПроцедуры

Функция КонечнаяНастройкаКомпоновки(Знач РедактируемыйФильтрПоПодстроке = Неопределено)
	
	Если РедактируемыйФильтрПоПодстроке = Неопределено Тогда
		РедактируемыйФильтрПоПодстроке = ОбщиеМетодыСтрокаПоиска;
	КонецЕсли; 
	Фрагменты = ирОбщий.СтрРазделитьЛкс(РедактируемыйФильтрПоПодстроке, " ", Истина, Ложь);
	КолонкиПоиска = Новый Структура();
	НастройкаКомпоновки = Компоновщик.ПолучитьНастройки();
	Если Фрагменты.Количество() > 0 Тогда
		ГруппаИли = НастройкаКомпоновки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		КолонкиПоиска.Вставить("Имя");
		Если ПрименятьФильтрКОписанию Тогда
			КолонкиПоиска.Вставить("Описание");
		КонецЕсли; 
		Если ПрименятьФильтрКТелу Тогда
			КолонкиПоиска.Вставить("Тело");
		КонецЕсли;
		Если ПрименятьФильтрКПараметрам Тогда
			КолонкиПоиска.Вставить("ПараметрыСтрокой");
		КонецЕсли;
		Для Каждого КлючИЗначение Из КолонкиПоиска Цикл
			ГруппаИ = ГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			Для Каждого Фрагмент Из Фрагменты Цикл
				ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(ГруппаИ, КлючИЗначение.Ключ, Фрагмент, ВидСравненияКомпоновкиДанных.Содержит,, Ложь);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли; 
	ЭлементыФормы.НадписьОтбор.Заголовок = ирОбщий.ПредставлениеОтбораЛкс(НастройкаКомпоновки.Отбор);
	ирКлиент.ДопСвойстваЭлементаФормыЛкс(ЭтаФорма, ЭлементыФормы.ОбщиеМетоды).МенеджерПоиска = ирКлиент.СоздатьМенеджерПоискаВТабличномПолеЛкс(КолонкиПоиска,,, КолонкиПоиска.Количество() > 1);
	Возврат НастройкаКомпоновки;

КонецФункции

Процедура ФильтрАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ирКлиент.ПромежуточноеОбновлениеСтроковогоЗначенияПоляВводаЛкс(ЭтаФорма, Элемент, Текст);
	ОбновитьДанные(Текст);
	
КонецПроцедуры

Процедура ДействияФормыПерейтиКОпределению(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ОбщиеМетоды.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаПолногоОписания = ОбщиеМетодыВсе.Найти(ТекущаяСтрока.ПолноеИмя, "ПолноеИмя");
	ОткрытьОпределениеСтруктурыТипа(СтрокаПолногоОписания.ТаблицаСтруктурТипов[0]);
	
КонецПроцедуры

Процедура ФильтрПриИзменении(Элемент)
	
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	ОбновитьДанные();
	
КонецПроцедуры

Процедура ФильтрНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ПрименятьФильтрКТелуПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

Процедура ПрименятьФильтрКОписаниюПриИзменении(Элемент)
	
	ОбновитьДанные();

КонецПроцедуры

Процедура ВычислятьТипыПриИзменении(Элемент)
	ПерезаполнитьТаблицуВсехМетодов();
КонецПроцедуры

Процедура ТолькоФункцииПриИзменении(Элемент)
	ОбновитьДанные();
КонецПроцедуры

Процедура ОбщиеМетодыПриАктивизацииСтроки(Элемент)
	
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
	ТекущаяСтрока = ЭлементыФормы.ОбщиеМетоды.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаПолногоОписания = ОбщиеМетодыВсе.Найти(ТекущаяСтрока.ПолноеИмя, "ПолноеИмя");
	ТипМодуля = "";
	Если СтрокаПолногоОписания.ОбщийМодуль Тогда
		СтруктураТипа = мПлатформа.СтруктураТипаИзЗначения(ирОбщий);
		СтруктураТипа.Метаданные = ирКэш.ОбъектМДПоПолномуИмениЛкс(СтрокаПолногоОписания.Модуль);
	ИначеЕсли Найти(СтрокаПолногоОписания.Модуль, ".") > 0 Тогда 
		СтруктураТипа = мПлатформа.СтруктураТипаИзКонкретногоТипа(Тип(ирОбщий.ИмяТипаИзПолногоИмениМДЛкс(СтрокаПолногоОписания.Модуль, "Менеджер")));
	Иначе
		СтруктураТипа = мПлатформа.НоваяСтруктураТипа("Глобальный");
		СтруктураТипа.Метаданные = Метаданные;
		ТипМодуля = СтрокаПолногоОписания.Модуль;
	КонецЕсли; 
	ИмяФайлаМодуляБезРасширения = "";
	МодульМетаданных = мПлатформа.ПодготовитьМодульМетаданных(СтруктураТипа, ТипМодуля, ИмяФайлаМодуляБезРасширения);
	Если Найти(СтрокаПолногоОписания.ТипЗначения, "??") = 1 Тогда
		ОбновитьТипЗначения(СтрокаПолногоОписания.ТаблицаСтруктурТипов[0].СтрокаОписания, МодульМетаданных, СтрокаПолногоОписания, Истина);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаПолногоОписания); 
	КонецЕсли;
	#Если Сервер И Не Сервер Тогда
		ТекущаяСтрока = ОбщиеМетоды.Добавить();
	#КонецЕсли
	СтрокаПолногоОписания = ОбщиеМетодыВсе.Найти(ТекущаяСтрока.ПолноеИмя, "ПолноеИмя");
	СтруктураТипаКонтекста = СтрокаПолногоОписания.ТаблицаСтруктурТипов[0];
	ОткрытьПрикрепленнуюФормуВызоваМетода(СтруктураТипаКонтекста, ЭтаФорма);
	ЭтаФорма.Активизировать();

	РасширениеФайлаМодуля = "txt";
	ирКлиент.ПоказатьПозициюМодуляЛкс(ТекущаяСтрока, мПлатформа.ПапкаКэшаМодулей.ПолноеИмя + "\" + ИмяФайлаМодуляБезРасширения + "." + РасширениеФайлаМодуля,, РасширениеФайлаМодуля);

КонецПроцедуры

Процедура ОбщиеМетодыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ОбщиеМетодыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ОбщиеМетоды.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаПолногоОписания = ОбщиеМетодыВсе.Найти(ТекущаяСтрока.ПолноеИмя, "ПолноеИмя");
	#Если Сервер И Не Сервер Тогда
		СтрокаПолногоОписания = ОбщиеМетоды.Добавить();
	#КонецЕсли
	Если Колонка = ЭлементыФормы.ОбщиеМетоды.Колонки.ТипЗначения Тогда
		ирКлиент.ОткрытьЗначениеЛкс(СтрокаПолногоОписания.ТаблицаСтруктурТипов,,, "Описания типов значений");
	ИначеЕсли Колонка = ЭлементыФормы.ОбщиеМетоды.Колонки.Описание Тогда
		ирКлиент.ОткрытьТекстЛкс(СтрокаПолногоОписания.Описание, "Описание метода " + СтрокаПолногоОписания.ПолноеИмя, "Обычный", Истина, СтрокаПолногоОписания.ПолноеИмя + ".Описание");
	ИначеЕсли Колонка = ЭлементыФормы.ОбщиеМетоды.Колонки.Ссылка Тогда
		ирКлиент.ПоказатьСсылкуНаСтрокуМодуляЛкс(ТекущаяСтрока.Ссылка);
	Иначе
		ОткрытьОпределениеСтруктурыТипа(СтрокаПолногоОписания.ТаблицаСтруктурТипов[0]);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	КонечнаяНастройкаКомпоновки();
	Если ОбновлятьСразу Тогда
		Если СтарыйСнимокНастройкиКомпоновки <> ирОбщий.ОбъектВСтрокуXMLЛкс(Компоновщик.Настройки) Тогда
			ирОбщий.КомпоновщикНастроекВосстановитьЛкс(Компоновщик);
			ОбновитьДанные();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура ДействияФормыОбновить(Кнопка)
	
	ОбновитьДанные();
	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	
	ирКлиент.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);

КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт 
	
	ирКлиент.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	ирКлиент.Форма_ОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры
 
Процедура КлсКомандаНажатие(Кнопка) Экспорт 
	
	ирКлиент.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если ирОбщий.ПроверитьПлатформаНеWindowsЛкс(Отказ,, Истина) Тогда
		Возврат;
	КонецЕсли; 
	ПроверитьИнициировать();
КонецПроцедуры

Процедура ДействияФормыВызовыМетода(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ОбщиеМетоды.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаПолногоОписания = ОбщиеМетодыВсе.Найти(ТекущаяСтрока.ПолноеИмя, "ПолноеИмя");
	СтруктураТипаКонтекста = СтрокаПолногоОписания.ТаблицаСтруктурТипов[0];
	ФормаВызовов = ПолучитьФорму("ПоискВызововМетода",, ТекущаяСтрока.ПолноеИмя); 
	ФормаВызовов.ПараметрПостояннаяСтруктураТипа = СтруктураТипаКонтекста;
	ФормаВызовов.Открыть(); 
	ФормаВызовов.ОбновитьДанные();
	
КонецПроцедуры

Процедура НадписьКэшМодулейНажатие(Элемент)
	ПолучитьФорму("ФормаНастройки", ФормаВладелец).Открыть();
КонецПроцедуры

ирКлиент.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирКлсПолеТекстаПрограммы.Форма.ОбщиеМетоды");
ОбновлятьСразу = Истина;
