Перем МаксЧислоПараметровФормы;
Перем ПеречислениеТипСлова;
Перем РасширениеФайлаМодуля;

Функция СохраняемаяНастройкаФормы(выхНаименование, выхИменаСвойств) Экспорт 
	выхИменаСвойств = "Форма.ИскатьНепрямые, Форма.ИскатьСлово, Форма.МаксЧислоРезультатов, Форма.ТипРодителя, Форма.ТипСлова";
	Возврат Неопределено;
КонецФункции

Процедура ЗагрузитьНастройкуВФорме(НастройкаФормы, ДопПараметры) Экспорт 
	
	ирКлиент.ЗагрузитьНастройкуФормыЛкс(ЭтаФорма, НастройкаФормы); 
	ЗагрузитьИскомоеСлово();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ирКлиент.Форма_ПриОткрытииЛкс(ЭтаФорма);
	ирКлиент.СоздатьМенеджерСохраненияНастроекФормыЛкс(ЭтаФорма);
	ВызовыСлова.Очистить();
	Если ПараметрИскатьНепрямые <> Неопределено Тогда
		ЭтаФорма.ИскатьНепрямые = ПараметрИскатьНепрямые;
	КонецЕсли;
	Если ЗначениеЗаполнено(КлючУникальности) И Найти(КлючУникальности, "-") = 0 Тогда
		ЭтаФорма.ИскатьСлово = КлючУникальности;
	КонецЕсли; 
	Если ЗначениеЗаполнено(КлючУникальности) Тогда
		ЭтаФорма.ТипРодителя = "";
		Если ПараметрСтруктураТипаРодителя <> Неопределено Тогда
			ЭтаФорма.ТипРодителя = мПлатформа.ИмяТипаИзСтруктурыТипа(ПараметрСтруктураТипаРодителя);
		КонецЕсли;
	КонецЕсли;
	СписокВыбора = ЭлементыФормы.МаксЧислоРезультатов.СписокВыбора;
	СписокВыбора.Добавить(100);
	СписокВыбора.Добавить(1000);
	СписокВыбора.Добавить(10000);
	СписокВыбора.Добавить(100000);
	ЗагрузитьИскомоеСлово();
	Если ЗначениеЗаполнено(КлючУникальности) Тогда
		//ПодключитьОбработчикОжидания("ОбновитьДанные", 0.1, Истина); // Нельзя прервать
	КонецЕсли;
	ЭтаФорма.ДатаОбновленияКэша = ирОбщий.ДатаОбновленияКэшаМодулейЛкс();

КонецПроцедуры

Процедура ОбновитьДанные() Экспорт  
	ДействияФормыНайти();
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ирКлиент.Форма_ПриЗакрытииЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура ВызовыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ВызовыСлова.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Колонка = ЭлементыФормы.ВызовыСлова.Колонки.Ссылка И ЗначениеЗаполнено(ВыбраннаяСтрока.Ссылка) Тогда 
		ДействияФормыПерейтиКОпределению();
	Иначе
		Если Не ирКлиент.ОткрытьСсылкуСтрокиМодуляЛкс(ВыбраннаяСтрока.Ссылка) Тогда 
			Если ВыбраннаяСтрока.Модуль = мПлатформа.ИмяДинамическогоМодуля() Тогда 
				ФормаВладелец.Активизировать();
				ПолеТекстаЛ = ПолеТекста;
			Иначе
				ПолеТекстаЛ = ирКлиент.ОткрытьПолеТекстаМодуляКонфигурацииЛкс(ВыбраннаяСтрока.Модуль).ПолеТекста;
			КонецЕсли;
			ПолеТекстаЛ.УстановитьГраницыВыделения(ВыбраннаяСтрока.Позиция, ВыбраннаяСтрока.Позиция + ВыбраннаяСтрока.ДлинаВхождения,,, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстФайлаСтроки(Знач ВыбраннаяСтрока = Неопределено)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		ВыбраннаяСтрока = ЭлементыФормы.ВызовыСлова.ТекущаяСтрока;
	КонецЕсли;
	ФайлМодуля = мПлатформа.ФайлМодуляИзКраткогоИмени(ВыбраннаяСтрока.Модуль);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлМодуля.ПолноеИмя);
	ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
	Возврат ТекстФайла;

КонецФункции

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	
	ирКлиент.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);

КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт 
	
	ирКлиент.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	ирКлиент.Форма_ОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры

Процедура КлсКомандаНажатие(Кнопка) Экспорт 
	
	ирКлиент.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если ирОбщий.ПроверитьПлатформаНеWindowsЛкс(Отказ,, Истина) Тогда
		Возврат;
	КонецЕсли; 
	ПроверитьИнициировать();
КонецПроцедуры

Процедура ДействияФормыНайти(Кнопка = Неопределено)

	ПолноеИмяСлова = ИскатьСлово;
	Если ТипСлова = ПеречислениеТипСлова.Конструктор Тогда
		ПолноеИмяСлова = "Новый " + ПолноеИмяСлова;
	Иначе
		ПолноеИмяСлова = ТипРодителя + "." + ПолноеИмяСлова;
		Если ТипСлова <> ПеречислениеТипСлова.Свойство Тогда
			ПолноеИмяСлова = ПолноеИмяСлова + "(";
		КонецЕсли;
	КонецЕсли;
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(ЭлементыФормы.ИскатьСлово, ЭтаФорма,,,, ПолноеИмяСлова);
	ВызовыСлова.Очистить();   
	ФайлыМодулей = Новый Массив;
	ПоискВДинамическомМодуле = Истина
		И мМодульМетаданных <> Неопределено 
		И Не ЗначениеЗаполнено(мИмяМодуля)
		И Найти(ИскатьСлово, ".") = 0;
	Если ПоискВДинамическомМодуле Тогда
		ФайлыМодулей.Добавить(Неопределено);
	КонецЕсли;
	Если ИскатьНепрямые Или Не ПоискВДинамическомМодуле Тогда
		ирОбщий.ДополнитьМассивЛкс(ФайлыМодулей, НайтиФайлы(мПлатформа.ПапкаКэшаМодулей.ПолноеИмя, "*." + РасширениеФайлаМодуля, Истина)); 
	КонецЕсли;
	мПлатформа.ИнициацияОписанияМетодовИСвойств();
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ФайлыМодулей.Количество());
	ИмяРодногоМодуляБезКонца = ирОбщий.СтрокаБезПоследнегоФрагментаЛкс(ирОбщий.ТекстМеждуМаркерамиЛкс(ИскатьСлово, "[", "]"));
	Если Истина
		И Не ЗначениеЗаполнено(ИмяРодногоМодуляБезКонца) 
		И мМодульМетаданных <> Неопределено
		И мМодульМетаданных.Методы.Найти(НРег(ИскатьСлово), "НИмя") <> Неопределено 
	Тогда
		ИмяРодногоМодуляБезКонца = ирОбщий.СтрокаБезПоследнегоФрагментаЛкс(мИмяМодуля);
	КонецЕсли;
	шРазделитель = мПлатформа.шРазделитель; 
	ШаблонПрямогоВызова = ШаблонПрямогоВызоваСлова(ИскатьСлово, ТипСлова);
	ШаблонПараметра = "(" + шВыражениеПрограммы + ")?" + шРазделитель + "*(?:$|,|\))";
	МаксЧислоПараметровВызовов = 0; 
	ДлинаПредФрагмента = 20;
	СтруктураОбновленияТабличногПоля = ирКлиент.СтрукутраПервогоОбновленияТабличногоПоляЛкс();
	Для Каждого Файл Из ФайлыМодулей Цикл
		#Если Сервер И Не Сервер Тогда
			Файл = Новый Файл;
		#КонецЕсли
		Если Файл = Неопределено Тогда
			ПолноеИмяФайла = "";
			Модуль = мПлатформа.ИмяДинамическогоМодуля();
			ТекстовыйДокумент = ПолеТекста;
		Иначе
			ПолноеИмяФайла = Файл.ПолноеИмя;
			Модуль = ирОбщий.ПоследнийФрагментЛкс(Файл.ПолноеИмя, мПлатформа.ПапкаКэшаМодулей.ПолноеИмя + "\");
			Модуль = ирОбщий.СтрокаБезПоследнегоФрагментаЛкс(Модуль);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
		КонецЕсли;
		ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор,, Модуль);
		Для Счетчик = 1 По 2 Цикл
			Если Счетчик = 1 Тогда 
				НайденныеВызовы = мПлатформа.НепрямыеВызовыСловаВМодуле(Модуль, ТекстовыйДокумент, Файл, ЭтотОбъект, ирОбщий.ПоследнийФрагментЛкс(ИскатьСлово), ТипСлова = ПеречислениеТипСлова.Метод);
				Если ИскатьНепрямые Тогда 
					Если ТипСлова = ПеречислениеТипСлова.Метод Тогда
						ВхожденияВызова = ирОбщий.НайтиРегВыражениеЛкс(ТекстМодуля, """" + ирОбщий.ПодготовитьТекстДляРегВыраженияЛкс(ИскатьСлово) + """",,,,,, Истина,,, ВхожденияВызова); // Без подгрупп для ускорения
						Для Каждого Вхождение Из ВхожденияВызова Цикл
							НайденныеВызовы.Добавить(Вхождение);
						КонецЦикла;
					КонецЕсли;
				Иначе 
					Продолжить;
				КонецЕсли;
			ИначеЕсли Счетчик = 2 Тогда 
				Если Ложь
					Или ТипСлова = ПеречислениеТипСлова.Конструктор
					Или ИскатьНепрямые И Не ЗначениеЗаполнено(ИмяРодногоМодуляБезКонца)
					Или ирОбщий.СтрНайтиЛкс("." + Модуль + ".", "." + ИмяРодногоМодуляБезКонца + ".",,,, Ложь) > 0 // TODO переделать на анализ основного объекта формы
				Тогда
					//
				Иначе
					Продолжить;
				КонецЕсли;
				ВхожденияВызова = ирОбщий.НайтиРегВыражениеЛкс(ТекстМодуля, ШаблонПрямогоВызова,,,,,, Истина,,, ВхожденияВызова); // Без подгрупп для ускорения
				НайденныеВызовы = ВхожденияВызова;
			КонецЕсли;
			Для Каждого ВхождениеВызова Из НайденныеВызовы Цикл
				Попытка
					ТекстВхождения = ВхождениеВызова.ТекстВхождения;
				Исключение
					ТекстВхождения = Сред(ТекстМодуля, ВхождениеВызова.ПозицияВхождения + 1, ВхождениеВызова.ДлинаВхождения);
				КонецПопытки;
				Если ВхождениеВызова.ПозицияВхождения > 1 Тогда
					ПредФрагмент = Лев(ТекстВхождения, 1);
					ТекстВхождения = Сред(ТекстВхождения, 2);
				Иначе 
					ПредФрагмент = "";
				КонецЕсли;
				ПозицияПредФрагмента = ВхождениеВызова.ПозицияВхождения + 1 - ДлинаПредФрагмента;
				Если ПозицияПредФрагмента < 1 Тогда
					ДлинаПредФрагментаЦикл = ДлинаПредФрагмента + ПозицияПредФрагмента - 1;
				Иначе 
					ДлинаПредФрагментаЦикл = ДлинаПредФрагмента;
				КонецЕсли;
				ПредФрагмент = СокрП(Сред(ТекстМодуля, ПозицияПредФрагмента, ДлинаПредФрагментаЦикл) + ПредФрагмент);
				ПервыйПредСимвол = Прав(ПредФрагмент, 1);
				ПервыйПостСимвол = Сред(ТекстМодуля, ВхождениеВызова.ПозицияВхождения + 1 + ВхождениеВызова.ДлинаВхождения, 1);
				РезультатИспользован = Ложь
					Или ПервыйПостСимвол = "["
					Или ПервыйПостСимвол = "."
					Или (Истина
							И ПервыйПредСимвол <> """"
							И ПервыйПредСимвол <> ";"
							И ПервыйПредСимвол <> ")"
							И Прав(ПредФрагмент, 2) <> "//"
							И (Ложь
								Или НРег(ПервыйПредСимвол) = "и" // или, и, если
								Или НРег(ПервыйПредСимвол) = "з" // из
								Или ирОбщий.СтрКончаетсяНаЛкс(ПредФрагмент, "Не") // целиком чтобы отделить от "Иначе"
								Или ирОбщий.СтрКончаетсяНаЛкс(ПредФрагмент, "Возврат") // целиком чтобы отделить от "Экспорт"
								Или ирОбщий.СтрКончаетсяНаЛкс(ПредФрагмент, "Пока") // целиком чтобы отделить от "Тогда"
								Или Не ирОбщий.ПроверитьКатегорииСимволаЛкс(ПервыйПредСимвол,,,, Истина) // спец. символ
								));
				//Если Ложь
				//	//Или ирОбщий.СтрКончаетсяНаЛкс(ПредФрагмент, "Процедура")
				//	//Или ирОбщий.СтрКончаетсяНаЛкс(ПредФрагмент, "Функция")
				//	Или (Истина 
				//		И ТипСлова <> ПеречислениеТипСлова.Конструктор
				//		И ИскатьНепрямые
				//		И Не ирОбщий.СтрНачинаетсяСЛкс(ТекстВхождения, ИскатьСлово) 
				//		И (Ложь
				//			Или ирОбщий.ЕдинственноеИмяМДЛкс(ирОбщий.ПервыйФрагментЛкс(ТекстВхождения)) <> Неопределено
				//			Или Метаданные.ОбщиеМодули.Найти(ирОбщий.ПервыйФрагментЛкс(ТекстВхождения)) <> Неопределено))
				//Тогда
				//	Продолжить;
				//КонецЕсли;
				ЛиПрямойВызов = Не ИскатьНепрямые Или Счетчик = 2 Или ирОбщий.СтрНайтиЛкс(ТекстВхождения, ИскатьСлово) < 4;
				Если Не ЛиПрямойВызов И Не ИскатьНепрямые Тогда
					Продолжить;
				КонецЕсли;
				СтрокаВызова = ВызовыСлова.Добавить();
				СтрокаВызова.Модуль = Модуль;
				СтрокаВызова.Внутренний = Счетчик = 2;
				СтрокаВызова.Прямой = ЛиПрямойВызов;
				Если ТипСлова = ПеречислениеТипСлова.Конструктор Тогда
					СтрокаВызова.ТипРодителя = "";
				Иначе 
					СтрокаВызова.ТипРодителя = "??";
				КонецЕсли;
				СтрокаВызова.Текст = СокрЛ(ТекстВхождения);
				СтрокаВызова.Позиция = ВхождениеВызова.ПозицияВхождения + 1 + 1;
				СтрокаВызова.ДлинаВхождения = ВхождениеВызова.ДлинаВхождения - 1;
				//СтрокаВызова.Активно = Не ирОбщий.СтрНачинаетсяСЛкс(ВхождениеВызова.ТекстВхождения, "//");
				СтрокаВызова.Результат = РезультатИспользован;
				ПозицияСкобки = Найти(ТекстВхождения, "(");      
				Если ПозицияСкобки > 0 Тогда 
					ТекстПараметровВызова = СокрЛП(Сред(ТекстВхождения, ПозицияСкобки + 1));
					Если ТекстПараметровВызова <> ")" Тогда
						ВхожденияПараметров = ирОбщий.НайтиРегВыражениеЛкс(ТекстПараметровВызова, ШаблонПараметра,,,,,, Истина,,, ВхожденияПараметров);
						ИндексПараметра = 0; 
						Для Каждого ВхождениеПараметра Из ВхожденияПараметров Цикл
							Если ИндексПараметра = МаксЧислоПараметровФормы Тогда
								Прервать;
							КонецЕсли;
							СтрокаВызова["Параметр" + ИндексПараметра] = СокрЛП(ирОбщий.СтрокаБезКонцаЛкс(ВхождениеПараметра.ТекстВхождения));
							ИндексПараметра = ИндексПараметра + 1;
						КонецЦикла;
						СтрокаВызова.ЧислоПараметров = ИндексПараметра - 1;
					КонецЕсли;
				КонецЕсли;
				МаксЧислоПараметровВызовов = Макс(СтрокаВызова.ЧислоПараметров, МаксЧислоПараметровВызовов);
				Если ЗначениеЗаполнено(МаксЧислоРезультатов) И ВызовыСлова.Количество() >= МаксЧислоРезультатов Тогда
					ирОбщий.СообщитьЛкс("Поиск остановлен по достижению макс. числа результатов");
					Перейти ~КонецЦикла;
				КонецЕсли; 
				Если Не СтруктураОбновленияТабличногПоля.ПерваяПорцияОтображена Тогда
					УточнитьСтрокуРезультата(СтрокаВызова);
				КонецЕсли;
				ирКлиент.ПроверитьПервоеОбновлениеТабличногоПоляЛкс(ЭлементыФормы.ВызовыСлова, СтруктураОбновленияТабличногПоля);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
~КонецЦикла:
	ВызовыСлова.Сортировать("Модуль, Позиция");
	ЭтаФорма.КоличествоНайдено = ВызовыСлова.Количество();
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	
	Для ИндексПараметра = 0 По МаксЧислоПараметровФормы - 1 Цикл
		Колонка = ЭлементыФормы.ВызовыСлова.Колонки["Параметр" + ИндексПараметра];
		Колонка.Видимость = ИндексПараметра < МаксЧислоПараметровВызовов;
	КонецЦикла;
	ЭлементыФормы.ВызовыСлова.Колонки.Параметры.Видимость = ЭлементыФормы.ВызовыСлова.Колонки.Параметр0.Видимость;
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ВызовыСлова;
	
КонецПроцедуры

Процедура ВызовыПриАктивизацииСтроки(Элемент)
	
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	ЭлементыФормы.ПолеТекстаВызова.УстановитьТекст("");
	ТекущаяСтрока = ЭлементыФормы.ВызовыСлова.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УточнитьСтрокуРезультата(ТекущаяСтрока);
	Если ТекущаяСтрока.ТипРодителя = "??" Тогда
		ПолеТекстаМодуля = ирКэш.ПолеТекстаМодуляЛкс(ТекущаяСтрока.Модуль);
		ПолеТекстаМодуля.КончитьОбработкуКоманды();
		ТекущаяСтрока.ВыражениеРодитель = ирОбщий.ПервыйФрагментЛкс(ТекущаяСтрока.Текст, "." + ирОбщий.ПоследнийФрагментЛкс(ИскатьСлово, "."), Ложь);
		ПолеТекстаМодуля.РазобратьТекущийКонтекст(,,,,, Истина, ТекущаяСтрока.Позиция);
		ТекущаяСтрока.Язык = ПолеТекстаМодуля.ПредставлениеЯзыка();
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВыражениеРодитель) Тогда
			ТекущаяСтрока.ТипРодителя = мПлатформа.ИмяТипаИзСтруктурыТипа(ПолеТекстаМодуля.мМодульМетаданных.СтруктураТипа);
		Иначе 
			ТаблицаТиповРодителя = ПолеТекстаМодуля.ВычислитьТипЗначенияВыражения(ТекущаяСтрока.ВыражениеРодитель);
			ТекущаяСтрока.ТипРодителя = мПлатформа.ПредставлениеМассиваСтруктурТипов(ТаблицаТиповРодителя);
		КонецЕсли;
		ОбновитьПризнакТипРодителяПодходит(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

//.
// Параметры:
//    ДанныеСтроки - Неопределено - 
Процедура ОбновитьПризнакТипРодителяПодходит(Знач ДанныеСтроки) Экспорт
	Если ДанныеСтроки.ТипРодителя <> "??" Тогда
		ДанныеСтроки.ТипРодителяПодходит = Истина
			И ЗначениеЗаполнено(ТипРодителя)
			И (Ложь
				Или Найти(", " + ДанныеСтроки.ТипРодителя + ",", ", " + ТипРодителя + ",") > 0 
				Или (Истина
					И ирОбщий.МножественноеИмяМДЛкс(ирОбщий.ПервыйФрагментЛкс(ТипРодителя)) <> Неопределено
					И (Ложь
						Или Найти(", " + ДанныеСтроки.ТипРодителя + ",", ", " + СтрЗаменить(ТипРодителя, ".", "Объект.") + ",") > 0 
						Или Найти(", " + ДанныеСтроки.ТипРодителя + ",", ", " + СтрЗаменить(ТипРодителя, ".", "Ссылка.") + ",") > 0)));
	КонецЕсли;
КонецПроцедуры

//.
// Параметры:
//    ТекущаяСтрока - , ? - 
Процедура УточнитьСтрокуРезультата(ТекущаяСтрока) Экспорт
	Если ТекущаяСтрока.Модуль = мПлатформа.ИмяДинамическогоМодуля() Тогда
		ЗагрузитьМетодМодуляПоПозиции(ТекущаяСтрока.Позиция);
		ТекущаяСтрока.НомерСтрокиМодуля = НомерСтрокиИзПозиции(ТекущаяСтрока.Позиция);
		Если мМетодМодуля <> Неопределено Тогда
			ТекущаяСтрока.ВызывающийМетод = мМетодМодуля.Имя;
		Иначе
			ТекущаяСтрока.ВызывающийМетод = мПлатформа.ИмяМетодаИнициация();
		КонецЕсли;
	Иначе
		ирКлиент.РазобратьПозициюМодуляВСтрокеТаблицыЛкс(ТекущаяСтрока, ТекущаяСтрока.Модуль, ЭлементыФормы.ПолеТекстаВызова);
	КонецЕсли;
КонецПроцедуры

Процедура ВызовыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	ОформлениеСтроки.Ячейки.Параметры.Видимость = Ложь;
	Если ДанныеСтроки.ТипРодителяПодходит = Истина Тогда
		ОформлениеСтроки.Ячейки.ТипРодителя.ЦветФона = ирОбщий.ЦветФонаТекущегоЗначенияЛкс();
	КонецЕсли;
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры

Процедура ДействияФормыПерейтиКОпределению(Кнопка = Неопределено)
	
	ТекущаяСтрока = ЭлементыФормы.ВызовыСлова.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ПоказатьСсылкуНаСтрокуМодуляЛкс(ТекущаяСтрока.Ссылка);
	
КонецПроцедуры

Процедура ИскатьСловоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка = Истина)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ИскатьСловоПриИзменении(Элемент)
	ЭтаФорма.ПараметрСтруктураТипаКонтекста = Неопределено;
	ЗагрузитьИскомоеСлово();
КонецПроцедуры

Процедура ЗагрузитьИскомоеСлово(Знач ОчиститьРезультаты = Истина)
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	Если ОчиститьРезультаты Тогда
		ВызовыСлова.Очистить();
	КонецЕсли;
	Если ирОбщий.СтрНачинаетсяСЛкс(ИскатьСлово, "Новый ") Тогда
		ЭтаФорма.ТипРодителя = "";
		ЭтаФорма.ТипСлова = ПеречислениеТипСлова.Конструктор;
		ЭтаФорма.ИскатьСлово = СокрЛП(ирОбщий.ПоследнийФрагментЛкс(ИскатьСлово, " "));
	ИначеЕсли ирОбщий.СтрКончаетсяНаЛкс(ИскатьСлово, "(") Тогда
		ЭтаФорма.ТипСлова = ПеречислениеТипСлова.Метод;
		ЭтаФорма.ИскатьСлово = СокрЛП(ирОбщий.СтрокаБезКонцаЛкс(ЭтаФорма.ИскатьСлово));
	ИначеЕсли Найти(ИскатьСлово, ".") > 0 Тогда
		ЭтаФорма.ТипСлова = ПеречислениеТипСлова.Свойство;
	КонецЕсли;
	Если Найти(ИскатьСлово, ".") > 0 Тогда 
		ЭтаФорма.ТипРодителя = ирОбщий.СтрокаБезПоследнегоФрагментаЛкс(ИскатьСлово, ".");
		ЭтаФорма.ИскатьСлово = ирОбщий.ПоследнийФрагментЛкс(ИскатьСлово);
	КонецЕсли;
	ирОбщий.ОбновитьТекстПослеМаркераЛкс(ЭтаФорма.Заголовок,, ИскатьСлово , ": "); 
	ИндексПараметра = 0; 
	ВариантыСинтаксиса = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ИскатьСлово) Тогда 
		СтруктураТипаКонтекста = Неопределено;
		Если ПараметрСтруктураТипаКонтекста <> Неопределено Тогда 
			СтруктураТипаКонтекста = ПараметрСтруктураТипаКонтекста;
		ИначеЕсли ЗначениеЗаполнено(ТипРодителя) Тогда 
			СтруктураТипаРодителя = мПлатформа.СтруктураТипаИзКонкретногоТипа(ТипРодителя);
			ТаблицаТипов = ВычислитьТипДочернегоЭлемента(ирОбщий.ЗначенияВМассивЛкс(СтруктураТипаРодителя), ИскатьСлово, ТипСлова);
			Если ТаблицаТипов.Количество() > 0 Тогда
				СтруктураТипаКонтекста = ТаблицаТипов[0];
			КонецЕсли;
		КонецЕсли;
		Если СтруктураТипаКонтекста = Неопределено Тогда
			ПредшествующийТекст = "";
			Если ТипСлова = ПеречислениеТипСлова.Конструктор Тогда
				ПредшествующийТекст = "Новый";
			КонецЕсли;
			Выражение = ИскатьСлово;
			Если ТипСлова <> ПеречислениеТипСлова.Свойство Тогда
				Выражение = Выражение + "(";
			КонецЕсли;
			ТаблицаСтруктурТиповКонтекста = ВычислитьТипЗначенияВыражения(Выражение,, ПредшествующийТекст,, ЗначениеЗаполнено(ПредшествующийТекст));
			Если ТаблицаСтруктурТиповКонтекста.Количество() = 0 Тогда
				СтруктураТипаКонтекста = мПлатформа.НоваяСтруктураТипа();
			Иначе 
				СтруктураТипаКонтекста = ТаблицаСтруктурТиповКонтекста[0]; // первый вариант синтаксиса
			КонецЕсли;
		КонецЕсли;
		СтрокаОписания = СтруктураТипаКонтекста.СтрокаОписания;
		Если СтрокаОписания <> Неопределено И ТипСлова <> ПеречислениеТипСлова.Свойство Тогда
			Если СтрокаОписания.Владелец().Колонки.Найти("ТелоБезВозвратов") <> Неопределено Тогда
				ОткрытьПрикрепленнуюФормуВызоваМетода(СтруктураТипаКонтекста, ЭтаФорма);
				ФормальныеПараметрыМетода = мПлатформа.ПараметрыМетодаМодуля(СтрокаОписания);
				Если ФормальныеПараметрыМетода <> Неопределено Тогда
					Для Каждого СтрокаПараметра Из ФормальныеПараметрыМетода Цикл
						КолонкаПараметра = ЭлементыФормы.ВызовыСлова.Колонки["Параметр" + ИндексПараметра];
						КолонкаПараметра.ТекстШапки = СтрокаПараметра.Имя;
						ИндексПараметра = ИндексПараметра + 1;
						Если ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, ПараметрИмяПараметра) Тогда
							КолонкаПараметра.Видимость = Истина;
							ЭлементыФормы.ВызовыСлова.ТекущаяКолонка = КолонкаПараметра;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				ЭтаФорма.ПараметрИмяПараметра = "";
			ИначеЕсли Истина
				И СтрокаОписания.Владелец().Колонки.Найти("ТипКонтекста") <> Неопределено 
				И (Ложь
					Или СтрокаОписания.ТипСлова = ПеречислениеТипСлова.Метод 
					Или СтрокаОписания.ТипСлова = ПеречислениеТипСлова.Конструктор) 
			Тогда
				ЛиТекущийВариантУстановленВручную = ЗначениеЗаполнено(ЭтаФорма.ТекущийВариант);
				
				// Мультиметка06322413
				СтрокиПараметров = мПлатформа.ПараметрыМетодаПлатформы(СтрокаОписания);
				#Если Сервер И Не Сервер Тогда
					СтрокиПараметров = Новый ТаблицаЗначений;
				#КонецЕсли
				НомерВарианта = 0;
				//Если Не ЛиТекущийВариантУстановленВручную Тогда
					ТаблицаВариантов = СтрокиПараметров.Скопировать();
					ЭтаФорма.ТекущийВариант = мПлатформа.ПодобратьВариантСинтаксисаМетода(ТаблицаВариантов,, ТекущийВариант, ЛиТекущийВариантУстановленВручную, НомерВарианта);
					ВариантыСинтаксиса.ЗагрузитьЗначения(ТаблицаВариантов.ВыгрузитьКолонку(0));
					Если ВариантыСинтаксиса.Количество() = 0 Тогда
						ВариантыСинтаксиса.Добавить();
					КонецЕсли; 
					ВариантыСинтаксиса.СортироватьПоЗначению();
				//КонецЕсли;
				
				ОткрытьПрикрепленнуюФормуВызоваМетода(СтруктураТипаКонтекста, ЭтаФорма);
				Для Каждого СтрокаПараметра Из СтрокиПараметров.НайтиСтроки(Новый Структура("ВариантСинтаксиса", ТекущийВариант)) Цикл
					ЭлементыФормы.ВызовыСлова.Колонки["Параметр" + ИндексПараметра].ТекстШапки = СтрокаПараметра.Параметр;
					ИндексПараметра = ИндексПараметра + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ВариантыСинтаксиса.Количество() = 0 Тогда
		ЭтаФорма.ТекущийВариант = Неопределено;
	КонецЕсли;
	ЭлементыФормы.ТекущийВариант.СписокВыбора = ВариантыСинтаксиса;
	//ЭтаФорма.ТекущийВариант = ЭтаФорма.ТекущийВариант; // Чтобы текст в поле стал отображаться
	ЭлементыФормы.ТекущийВариант.ТолькоПросмотр = ЭлементыФормы.ТекущийВариант.СписокВыбора.Количество() < 2;
	МаксЧислоПараметровВызовов = ИндексПараметра;
	Для ИндексПараметра = 0 По МаксЧислоПараметровФормы - 1 Цикл
		Колонка = ЭлементыФормы.ВызовыСлова.Колонки["Параметр" + ИндексПараметра];
		Если ИндексПараметра >= МаксЧислоПараметровВызовов Тогда
			Колонка.ТекстШапки = "Параметр" + (ИндексПараметра + 1);
		КонецЕсли;
		Если ОчиститьРезультаты Тогда
			Колонка.Видимость = ИндексПараметра < МаксЧислоПараметровВызовов;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

Процедура ТекущийВариантПриИзменении(Элемент)
	ЗагрузитьИскомоеСлово(Ложь);
КонецПроцедуры

Процедура НадписьКэшМодулейНажатие(Элемент)
	ПолучитьФорму("ФормаНастройки", ФормаВладелец).Открыть();
КонецПроцедуры

Процедура ДействияФормыНайтиВызовыМетода(Кнопка)
	ВыбраннаяСтрока = ЭлементыФормы.ВызовыСлова.ТекущаяСтрока;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаВызывающее = ирОбщий.НовыйАнализаторКодаЛкс();
	ПолеТекстаВызывающее.ИнициироватьНеинтерактивно();
	ПолеТекстаВызывающее.УстановитьТекст(ТекстФайлаСтроки(),,,, ВыбраннаяСтрока.Модуль);
	ПолеТекстаВызывающее.ОткрытьПоискВызововСлова(ВыбраннаяСтрока.ВызывающийМетод + "(", ИскатьНепрямые);
КонецПроцедуры

Процедура ТипРодителяПриИзменении(Элемент)
	Для Каждого Строка Из ВызовыСлова Цикл
		ОбновитьПризнакТипРодителяПодходит(Строка);
	КонецЦикла;
КонецПроцедуры

Процедура ТипСловаПриИзменении(Элемент)
	ЗагрузитьИскомоеСлово();
КонецПроцедуры


ирКлиент.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирКлсПолеТекстаПрограммы.Форма.СсылкиНаСлово");
#Если Сервер И Не Сервер Тогда
	ПолеТекста = Обработки.ирОболочкаПолеТекста.Создать();
#КонецЕсли                                                        
МаксЧислоПараметровФормы = 20;
РасширениеФайлаМодуля = "txt";
ПеречислениеТипСлова = мПлатформа.ПеречислениеТипСлова();
ТипСлова = ПеречислениеТипСлова.Метод;
